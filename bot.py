print("–°—Ç–∞—Ä—Ç –∫–æ–¥–∞ –±–æ—Ç–∞")

import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import TOKEN

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

ADMIN_CHAT_ID = 733137079  # –¢–≤–æ–π —á–∏—Å–ª–æ–≤–æ–π ID

kb = ReplyKeyboardMarkup(resize_keyboard=True)
kb.add(KeyboardButton("üìò –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ –≥–∞–π–¥–∞"))
kb.add(KeyboardButton("üí∞ –ö—É–ø–∏—Ç—å –≥–∞–π–¥"))
kb.add(KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"))

class QuestionState(StatesGroup):
    waiting_for_question = State()

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    await message.answer(
        """üëã –ü—Ä–∏–≤–µ—Ç!
–Ø ‚Äî –ú–∞—Ä–∏—è –ì—É–∫–∞—Å—è–Ω, –∏ —è –≤–µ—Ä—é, —á—Ç–æ —Ç–≤–æ–∏ –∫—É—Ä—Å—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –∑–∞–≤–∏—Å–µ—Ç—å –æ—Ç –ø—Ä–æ–≥—Ä–µ–≤–æ–≤, —Å—Ç–æ—Ä–∏—Å –∏ –≤—ã–≥–æ—Ä–∞–Ω–∏—è.

–¢—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–∞–≤–∞—Ç—å –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–µ ‚Äî –±–µ–∑ ¬´–≤–ø–∏—Ö–∏–≤–∞–Ω–∏—è¬ª –∏ —Ä—É—á–Ω—ã—Ö –ø–µ—Ä–µ–ø–∏—Å–æ–∫.
–ò –≤—Å—ë, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∞ –≤ Telegram.

üìò –≠—Ç–æ—Ç –≥–∞–π–¥ ‚Äî —Ç–≤–æ—è –ø–µ—Ä–≤–∞—è —Å—Ç—É–ø–µ–Ω—å –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂.

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:""",
        reply_markup=kb
    )

@dp.message_handler(lambda msg: msg.text == "üìò –ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ –≥–∞–π–¥–∞")
async def guide_info(message: types.Message):
    text = """–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏ –≥–∞–π–¥–∞: 

‚Äî –ü—Ä–æ—Å—Ç–∞—è —Å—Ö–µ–º–∞ –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –Ω–æ–≤–∏—á–∫–æ–≤
‚Äî –ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–¥–∞—é—Ç
‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram-–±–æ—Ç–∞
‚Äî –ë–æ–Ω—É—Å: —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∑–∞ 1 –¥–µ–Ω—å

–¢—ã —Å–º–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∞–≤—Ç–æ–≤–æ—Ä–æ–Ω–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è!"""
    await message.answer(text)

@dp.message_handler(lambda msg: msg.text == "üí∞ –ö—É–ø–∏—Ç—å –≥–∞–π–¥")
async def buy_guide(message: types.Message):
    text = """üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –≥–∞–π–¥–∞ ‚Äî 490‚ÇΩ
–û–ø–ª–∞—Ç–∏ –ø–æ —Å–ª–µ–¥—É—é—â–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç–∞–º:

üîπ –ù–æ–º–µ—Ä —Å—á—ë—Ç–∞:
`40817 810 3 0685 0024338`

‚ùó –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚Äî –ø—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏–ª–∏ —Ñ–æ—Ç–æ —á–µ–∫–∞.
–Ø –ø—Ä–æ–≤–µ—Ä—é –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≥–∞–π–¥ üòä"""
    await message.answer(text, parse_mode='Markdown')

@dp.message_handler(lambda msg: msg.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É —Ç–µ–±–µ.")
    await QuestionState.waiting_for_question.set()

@dp.message_handler(state=QuestionState.waiting_for_question, content_types=types.ContentTypes.TEXT)
async def forward_question(message: types.Message, state: FSMContext):
    user = message.from_user
    question = message.text
    await bot.send_message(ADMIN_CHAT_ID, f"–í–æ–ø—Ä–æ—Å –æ—Ç @{user.username or user.id} ({user.full_name}):\n\n{question}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å! –Ø —Å–∫–æ—Ä–æ —Ç–µ–±–µ –æ—Ç–≤–µ—á—É.")
    await state.finish()

@dp.message_handler(content_types=['photo', 'document'])
async def handle_payment_proof(message: types.Message):
    user = message.from_user
    caption = f"üì• –ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω –æ–ø–ª–∞—Ç—ã –æ—Ç @{user.username or user.id}\n–ò–º—è: {user.full_name}"

    if message.photo:
        file_id = message.photo[-1].file_id
        await bot.send_photo(chat_id=ADMIN_CHAT_ID, photo=file_id, caption=caption)
    elif message.document:
        await bot.send_document(chat_id=ADMIN_CHAT_ID, document=message.document.file_id, caption=caption)

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –Ø –ø—Ä–æ–≤–µ—Ä—é –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –≥–∞–π–¥ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.")

@dp.message_handler(commands=['reply'])
async def admin_reply(message: types.Message):
    if message.chat.id != ADMIN_CHAT_ID:
        return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω

    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫:\n/reply <user_id> <—Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞>")
        return

    try:
        user_id = int(args[1])
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π user_id. –≠—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
        return

    answer_text = args[2]

    try:
        await bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω—è:\n\n{answer_text}")
        await message.reply("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

@dp.message_handler()
async def echo_all(message: types.Message):
    await message.answer("–Ø –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ!")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
